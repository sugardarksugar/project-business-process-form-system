#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ast_1 = require("../core/ast");
const file_1 = require("../utils/file");
const auto_migrate_1 = require("../db/auto-migrate");
const knex_1 = require("../db/knex");
const env_1 = require("../db/env");
/* eslint-disable no-console */
let dbFile_or_client = env_1.env.DB_CLIENT || '';
let detect_rename = false;
for (let i = 2; i < process.argv.length; i++) {
    const arg = process.argv[i];
    if (arg === '--rename' || arg === '-r') {
        detect_rename = true;
        continue;
    }
    dbFile_or_client = arg;
}
if (!dbFile_or_client) {
    console.error('Error: missing argument');
    console.error('Either provice sqlite filename in argument');
    console.error('Or provide database client in argument or DB_CLIENT environment variable');
    process.exit(1);
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        const erd = yield new Promise(resolve => (0, file_1.readErdFromStdin)(resolve));
        const parseResult = (0, ast_1.parse)(erd);
        const srcDir = (0, auto_migrate_1.detectSrcDir)();
        let db_client;
        let dbFile;
        switch (dbFile_or_client) {
            case 'mysql':
            case 'pg':
            case 'postgresql':
                db_client = dbFile_or_client;
                break;
            default: {
                db_client = 'better-sqlite3';
                dbFile = dbFile_or_client;
                (0, auto_migrate_1.setupSqlite)({ srcDir, dbFile });
            }
        }
        (0, auto_migrate_1.setupKnexFile)({ srcDir, db_client });
        const knex = dbFile ? (0, knex_1.loadSqliteKnex)(dbFile) : (0, knex_1.loadKnex)(db_client);
        yield (0, auto_migrate_1.setupKnexMigration)({
            knex,
            parseResult,
            db_client,
            detect_rename,
        });
    });
}
main();
