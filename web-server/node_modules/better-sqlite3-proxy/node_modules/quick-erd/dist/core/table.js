"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.printTables = exports.tablesToText = exports.fieldToString = exports.tableToString = void 0;
const enum_1 = require("./enum");
const guide_1 = require("./guide");
function tableToString(table) {
    return `
${table.name}
${'-'.repeat(table.name.length)}
${table.field_list.map(fieldToString).join('\n')}
`;
}
exports.tableToString = tableToString;
function fieldToString(field) {
    let type = field.type;
    if (type.match(/^enum/i)) {
        type = (0, enum_1.formatEnum)(type);
    }
    let text = `${field.name} ${type}`;
    if (field.is_unsigned) {
        text += ` unsigned`;
    }
    if (field.is_null) {
        text += ' NULL';
    }
    if (field.is_unique) {
        text += ' unique';
    }
    if (field.is_primary_key) {
        text += ' PK';
    }
    if (field.references) {
        const ref = field.references;
        text += ` FK ${ref.type} ${ref.table}.${ref.field}`;
    }
    return text;
}
exports.fieldToString = fieldToString;
function tablesToText(tables) {
    const text = (0, guide_1.makeGuide)('https://erd.surge.sh or https://quick-erd.surge.sh')
        .replace(' or ', '\n# or ')
        .trim() +
        '\n\n\n' +
        tables.map(tableToString).join('\n').trim();
    return text;
}
exports.tablesToText = tablesToText;
function printTables(tables) {
    tables = skipTimestamps(tables);
    const text = tablesToText(tables);
    // eslint-disable-next-line no-console
    console.log(text);
}
exports.printTables = printTables;
const skip_tables = [
    'knex_migrations',
    'knex_migrations_lock',
    'sqlite_sequence',
];
const skip_fields = ['created_at', 'updated_at'];
function skipTimestamps(tables) {
    return tables
        .filter(table => !skip_tables.includes(table.name))
        .map(table => (Object.assign(Object.assign({}, table), { field_list: table.field_list.filter(field => !skip_fields.includes(field.name)) })));
}
