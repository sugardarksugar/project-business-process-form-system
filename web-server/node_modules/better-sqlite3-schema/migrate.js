"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.migrateDownUntil = exports.migrateDown = exports.migrateUp = exports.DefaultMigrationTable = void 0;
exports.DefaultMigrationTable = 'migration';
/**
 * This function has different from the better-sqlite3-helper behavior.
 *
 * This function works well when the database already has migrations from files.
 * (Mixing file mode and string array mode.)
 */
function migrateUp(options) {
    const db = options.db;
    const table = options.table || exports.DefaultMigrationTable;
    db.run(`
create table if not exists ${table} (
  id integer primary key
, name text not null
, up text not null
, down text not null
);
`);
    if (!db.queryFirstCell(`
select
count(*) as count
from sqlite_master
where type = 'table'
  and name = '${table}'
  and sql like '%is_multiple_statements%'
`)) {
        db.run(`
alter table ${table}
add column is_multiple_statements integer default 0 not null
`);
    }
    const select = db.prepare(`
select id from ${table}
where name = ?
limit 1
`);
    const insert = db.prepare(`
insert into ${table}
(name, up, down, is_multiple_statements)
values
(:name, :up, :down, :is_multiple_statements)
`);
    options.migrations.forEach(db.transaction((migrate) => {
        if (select.get(migrate.name))
            return;
        run({
            db,
            is_multiple_statements: migrate.is_multiple_statements,
            sql: migrate.up,
        });
        migrate.is_multiple_statements = migrate.is_multiple_statements ? 1 : 0;
        insert.run(migrate);
    }));
}
exports.migrateUp = migrateUp;
function migrateDown(options) {
    const db = options.db;
    const table = options.table || exports.DefaultMigrationTable;
    const row = db
        .prepare(`select id, down, is_multiple_statements from ${table} where name = ?`)
        .get(options.name);
    if (!row) {
        if (options.throw)
            throw new Error('migration not found');
        return;
    }
    const delete_row = db.prepare(`delete from ${table} where id = ?`);
    db.transaction(() => {
        run({
            db,
            is_multiple_statements: row.is_multiple_statements,
            sql: row.down,
        });
        delete_row.run(row.id);
    })();
}
exports.migrateDown = migrateDown;
/**
 * rollback all the migrations until 'name' (inclusive)
 */
function migrateDownUntil(options) {
    const db = options.db;
    const table = options.table || exports.DefaultMigrationTable;
    const lastRow = db
        .prepare(`select id from ${table} where name = ?`)
        .get(options.name);
    if (!lastRow) {
        if (options.throw)
            throw new Error('migration not found');
        return;
    }
    const delete_row = db.prepare(`delete from ${table} where id = ?`);
    db.prepare(`
select id, down, is_multiple_statements
from ${table}
where id >= ?
`)
        .all(lastRow.id)
        .forEach(db.transaction(row => {
        run({
            db,
            is_multiple_statements: row.is_multiple_statements,
            sql: row.down,
        });
        delete_row.run(row.id);
    }));
}
exports.migrateDownUntil = migrateDownUntil;
function run({ db, sql, is_multiple_statements, }) {
    let list = [sql];
    if (is_multiple_statements) {
        list = sql.split(';');
    }
    list.forEach(sql => {
        sql = sql.trim();
        if (sql) {
            db.run(sql);
        }
    });
}
//# sourceMappingURL=migrate.js.map